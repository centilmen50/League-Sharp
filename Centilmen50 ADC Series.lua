assert(load(Base64Decode("local version = "BETA"

require 'SxOrbwalk'
require 'VPrediction'
if VIP_USER then require 'Prodiction' end

if myHero.charName == "Ezreal" then


require 'BaseUlt'



function OnLoad()
	Variables()
	Menu()
	PriorityOnLoad()
	PrintChat("<font color=\"#FFFF00\">Ezreal Beta <font color=\"#FF0000\">Centilmen50")
end

function OnTick()
	ComboKey = Settings.combo.comboKey
	HarassKey = Settings.harass.harassKey
	HarassToggle = Settings.harass.harassToggle
	FarmKey = Settings.farm.farmKey
	JungleClearKey = Settings.jungle.jungleKey
	LaneClearKey = Settings.lane.laneKey
	
	if ComboKey then
		Combo(Target)
	end
	
	if HarassKey then
		Harass(Target)
	elseif HarassToggle then
		Harass(Target)
	end
	
	if FarmKey then
		Farm()
	end
	
	if JungleClearKey then
		JungleClear()
	end
	
	if LaneClearKey then
		LaneClear()
	end
	
	if Settings.ks.killSteal then
		KillSteal()
	end

	Checks()
end

function OnDraw()
	if not myHero.dead and not Settings.drawing.mDraw then
		if SkillQ.ready and Settings.drawing.qDraw then 
			DrawCircle(myHero.x, myHero.y, myHero.z, SkillQ.range, RGB(Settings.drawing.qColor[2], Settings.drawing.qColor[3], Settings.drawing.qColor[4]))
		end
		if SkillW.ready and Settings.drawing.wDraw then 
			DrawCircle(myHero.x, myHero.y, myHero.z, SkillW.range, RGB(Settings.drawing.wColor[2], Settings.drawing.wColor[3], Settings.drawing.wColor[4]))
		end
		if SkillE.ready and Settings.drawing.eDraw then 
			DrawCircle(myHero.x, myHero.y, myHero.z, SkillE.range, RGB(Settings.drawing.eColor[2], Settings.drawing.eColor[3], Settings.drawing.eColor[4]))
		end
		
		if Settings.drawing.myHero then
			DrawCircle(myHero.x, myHero.y, myHero.z, TrueRange(), RGB(Settings.drawing.myColor[2], Settings.drawing.myColor[3], Settings.drawing.myColor[4]))
		end
		
		if Settings.drawing.Target and Target ~= nil then
			DrawCircle(Target.x, Target.y, Target.z, 80, ARGB(255, 10, 255, 10))
		end
	end
end

------------------------------------------------------
--			 Fonksiyonlar			
------------------------------------------------------

function Combo(unit)
	if ValidTarget(unit) and unit ~= nil and unit.type == myHero.type then
		if Settings.combo.comboItems then
			UseItems(unit)
		end
		
		if Settings.combo.useR2 then CastR(unit) end
		CastE(unit)
		CastQ(unit)
		if Settings.combo.useW then CastW(unit) end
	end
end

function Harass(unit)
	if ValidTarget(unit) and unit ~= nil and unit.type == myHero.type and not IsMyManaLow("Harass") then
		if Settings.harass.useQ then CastQ(unit) end
		if Settings.harass.useW then CastW(unit) end
	end
end

function Farm()
	enemyMinions:update()
	if FarmKey and not IsMyManaLow("Farm") then
		for i, minion in pairs(enemyMinions.objects) do
			if Settings.farm.farmQ then
				if ValidTarget(minion) and minion ~= nil and myHero:CalcDamage(minion, ((5*(4 * myHero:GetSpellData(0).level + 3)) + myHero.totalDamage + (myHero.ap*0.4))) > VP:GetPredictedHealth(minion, 1, SkillQ.delay  + GetDistance(myHero, minion.pos) / SkillQ.speed - GetLatency()/1000) then
					CastQ(minion)
				end
			end
		end
	end
end

function LaneClear()
	enemyMinions:update()
	if LaneClearKey and not IsMyManaLow("LaneClear") then
		for i, minion in pairs(enemyMinions.objects) do
			if ValidTarget(minion) and minion ~= nil then
				if Settings.lane.laneQ and GetDistance(minion) <= SkillQ.range and SkillQ.ready then
					CastSpell(_Q, minion.x, minion.z)
				end
			end		 
		end
	end
end

function JungleClear()
	if Settings.jungle.jungleKey and not IsMyManaLow("JungleClear") then
		local JungleMob = GetJungleMob()
		
		if JungleMob ~= nil then
			if Settings.jungle.jungleQ and GetDistance(JungleMob) <= SkillQ.range and SkillQ.ready then
				CastSpell(_Q, JungleMob.x, JungleMob.z)
			end
		end
	end
end

function CastQ(unit)	
	if unit ~= nil and GetDistance(unit) <= SkillQ.range and SkillQ.ready then
		if Settings.misc.prediction == 1 then
			local CastPosition,  HitChance,  Position = VP:GetLineCastPosition(unit, SkillQ.delay, SkillQ.width, SkillQ.range, SkillQ.speed, myHero, true)
					
			if HitChance >= 2 then
				CastSpell(_Q, CastPosition.x, CastPosition.z)
			end
		elseif Settings.misc.prediction == 2 and VIP_USER then
			local pos, info = Prodiction.GetPrediction(unit, SkillQ.range, SkillQ.speed, SkillQ.delay, SkillQ.width)
			
			if pos ~= nil and not info.mCollision() then
				CastSpell(_Q, pos.x, pos.z)
			end
		end
	end
end

function CastW(unit)
	if unit ~= nil and GetDistance(unit) <= SkillW.range and SkillW.ready then
		if Settings.misc.prediction == 1 then
			local CastPosition,  HitChance,  Position = VP:GetLineCastPosition(unit, SkillW.delay, SkillW.width, SkillW.range, SkillW.speed, myHero)
				
			if HitChance >= 2 then
				CastSpell(_W, CastPosition.x, CastPosition.z)
			end
		elseif Settings.misc.prediction == 2 and VIP_USER then
			local pos, info = Prodiction.GetPrediction(unit, SkillW.range, SkillW.speed, SkillW.delay, SkillW.width)
			
			if pos ~= nil then
				CastSpell(_W, pos.x, pos.z)
			end
		end
	end
end

function CastE(unit)
	if Settings.combo.useE == 3 then return end

	if Settings.combo.useE == 2 and unit ~= nil and GetDistance(unit) <= (SkillQ.range + SkillE.range) and SkillE.ready then
		CastSpell(_E, unit.x, unit.z)
	elseif Settings.combo.useE == 1 and GetDistance(unit) <= (SkillQ.range + SkillE.range) then
		local Mouse = Vector(myHero) + 400 * (Vector(mousePos) - Vector(myHero)):normalized()
		
		CastSpell(_E, Mouse.x, Mouse.z)
	end
end

function CastR(unit)
	if ComboKey and Settings.combo.useR2 == 1 then return end
	if unit ~= nil and SkillR.ready then
		if Settings.misc.prediction == 1 then
			local AOECastPosition, MainTargetHitChance, nTargets = VP:GetLineAOECastPosition(unit, SkillR.delay, SkillR.width, SkillR.range, SkillR.speed, myHero)
			
			if MainTargetHitChance >= 2 then
				if ComboKey then
					if Settings.combo.useR2 == 2 and nTargets >= 1 then
						CastSpell(_R, AOECastPosition.x, AOECastPosition.z) 
					elseif Settings.combo.useR2 == 3 and nTargets >= 2 then
						CastSpell(_R, AOECastPosition.x, AOECastPosition.z) 
					elseif Settings.combo.useR2 == 4 and nTargets >= 3 then
						CastSpell(_R, AOECastPosition.x, AOECastPosition.z) 
					elseif Settings.combo.useR2 == 5 and nTargets >= 4 then
						CastSpell(_R, AOECastPosition.x, AOECastPosition.z) 
					end
				else
					CastSpell(_R, AOECastPosition.x, AOECastPosition.z)
				end
			end
		elseif Settings.misc.prediction == 2 and VIP_USER then
			local pos, info = Prodiction.GetPrediction(unit, SkillR.range, SkillR.speed, SkillR.delay, SkillR.width)
			
			if pos ~= nil then
				CastSpell(_R, pos.x, pos.z)
			end
		end
	end
end

function KillSteal()
	for _, enemy in ipairs(GetEnemyHeroes()) do
		if ValidTarget(enemy) and enemy.visible then
			local qDmg = myHero:CalcDamage(enemy, ((5*(4 * myHero:GetSpellData(0).level + 3)) + myHero.totalDamage + (myHero.ap*0.4)))
			local wDmg = getDmg("W", enemy, myHero)
			local rDmg = getDmg("R", enemy, myHero)
			
			if Settings.ks.ksQ and enemy.health <= qDmg then
				CastQ(enemy)
			elseif Settings.ks.ksQ and Settings.ks.ksW and enemy.health <= (qDmg + wDmg) and GetDistance(enemy) < SkillW.range then
				CastW(enemy)
				CastQ(enemy)
			elseif Settings.ks.ksW and enemy.health <= wDmg then
				CastW(enemy)
			elseif Settings.ks.ksR and enemy.health <= rDmg and GetDistance(enemy) <= SkillR.range then
				CastR(enemy)
			end

			if Settings.ks.autoIgnite then
				AutoIgnite(enemy)
			end
		end
	end
end

function AutoIgnite(unit)
	if ValidTarget(unit, Ignite.range) and unit.health <= 50 + (20 * myHero.level) then
		if Ignite.ready then
			CastSpell(Ignite.slot, unit)
		end
	end
end

------------------------------------------------------
--			 Menuler Falan		
------------------------------------------------------

function Checks()
	SkillQ.ready = (myHero:CanUseSpell(_Q) == READY)
	SkillW.ready = (myHero:CanUseSpell(_W) == READY)
	SkillE.ready = (myHero:CanUseSpell(_E) == READY)
	SkillR.ready = (myHero:CanUseSpell(_R) == READY)
	
	if myHero:GetSpellData(SUMMONER_1).name:find(Ignite.name) then
		Ignite.slot = SUMMONER_1
	elseif myHero:GetSpellData(SUMMONER_2).name:find(Ignite.name) then
		Ignite.slot = SUMMONER_2
	end
	
	Ignite.ready = (Ignite.slot ~= nil and myHero:CanUseSpell(Ignite.slot) == READY)
	
	TargetSelector:update()
	Target = GetCustomTarget()
	SxOrb:ForceTarget(Target)
	
	if Settings.drawing.lfc.lfc then _G.DrawCircle = DrawCircle2 else _G.DrawCircle = _G.oldDrawCircle end
	
	SetRRange()
end

function IsMyManaLow(mode)
	if mode == "Harass" then
		if myHero.mana < (myHero.maxMana * ( Settings.harass.harassMana / 100)) then
			return true
		else
			return false
		end
	elseif mode == "LaneClear" then
		if myHero.mana < (myHero.maxMana * ( Settings.lane.laneMana / 100)) then
			return true
		else
			return false
		end
	elseif mode == "JungleClear" then
		if myHero.mana < (myHero.maxMana * ( Settings.jungle.jungleMana / 100)) then
			return true
		else
			return false
		end
	elseif mode == "Farm" then
		if myHero.mana < (myHero.maxMana * ( Settings.farm.farmMana / 100)) then
			return true
		else
			return false
		end
	end
end

function Menu()
	Settings = scriptConfig("Ezreal "..version.."", "Centilmen50s")
	
	Settings:addSubMenu("Kombo Ayarlari", "combo")
		Settings.combo:addParam("comboKey", "Kombo", SCRIPT_PARAM_ONKEYDOWN, false, 32)
		Settings.combo:addParam("useQ", ""..SkillQ.name.." (Q) Komboda Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.combo:addParam("useW", ""..SkillW.name.." (W) Komboda Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.combo:addParam("useE", ""..SkillE.name.." (E) Komboda Kullan", SCRIPT_PARAM_LIST, 1, { "Fare Yonunde", "Sampiyona Dogru"})
		Settings.combo:addParam("useR2", ""..SkillR.name.." (R) Komboda Kullan", SCRIPT_PARAM_LIST, 2, { "Farketmez", "En Az 1 Hedef", "En Az 2 Hedef", "En Az 3 Hedef", "En Az 4 Hedef" })
		Settings.combo:addParam("comboItems", "Item Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.combo:permaShow("comboKey")
	
	Settings:addSubMenu("Durtme Ayarlari", "harass")
		Settings.harass:addParam("harassKey", "Durt", SCRIPT_PARAM_ONKEYDOWN, false, GetKey("C"))
		Settings.harass:addParam("harassToggle", "Surekli Durt", SCRIPT_PARAM_ONKEYTOGGLE, false, GetKey("T"))
		Settings.harass:addParam("useQ", ""..SkillQ.name.." (Q) Durtmede Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.harass:addParam("useW", ""..SkillW.name.." (W) Durtmede Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.harass:addParam("harassMana", "Minimum Mana: ", SCRIPT_PARAM_SLICE, 30, 0, 100, 0)
		Settings.harass:permaShow("harassKey")
		
	Settings:addSubMenu("Farm Ayarlari", "farm")
		Settings.farm:addParam("farmKey", "Farm", SCRIPT_PARAM_ONKEYDOWN, false, GetKey("X"))
		Settings.farm:addParam("farmQ", "Farm Alirken "..SkillQ.name.." (Q) Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.farm:addParam("farmMana", "Minimum Mana: ", SCRIPT_PARAM_SLICE, 30, 0, 100, 0)
		Settings.farm:permaShow("farmKey")
		
	Settings:addSubMenu("Koridor Temizleme Ayarlari", "lane")
		Settings.lane:addParam("laneKey", "Koridor Temizleme", SCRIPT_PARAM_ONKEYDOWN, false, GetKey("V"))
		Settings.lane:addParam("laneQ", "Koridor Temizlerken "..SkillQ.name.." (Q) Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.lane:addParam("laneMana", "Minimum Mana: ", SCRIPT_PARAM_SLICE, 30, 0, 100, 0)
		Settings.lane:permaShow("laneKey")
		
	Settings:addSubMenu("Orman Temizleme Ayarlari", "jungle")
		Settings.jungle:addParam("jungleKey", "Orman Temizleme", SCRIPT_PARAM_ONKEYDOWN, false, GetKey("V"))
		Settings.jungle:addParam("jungleQ", "Orman Temizlerken "..SkillQ.name.." (Q) Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.jungle:addParam("jungleMana", "Minimum Mana: ", SCRIPT_PARAM_SLICE, 30, 0, 100, 0)
		Settings.jungle:permaShow("jungleKey")
		
	Settings:addSubMenu("Calma Ayarlari", "ks")
		Settings.ks:addParam("killSteal", "Klasik Kill Calma", SCRIPT_PARAM_ONOFF, true)
		Settings.ks:addParam("sep", " ", SCRIPT_PARAM_INFO, "")
		Settings.ks:addParam("ksQ", "Kullan "..SkillQ.name.." (Q)", SCRIPT_PARAM_ONOFF, true)
		Settings.ks:addParam("ksW", "Kullan "..SkillW.name.." (W)", SCRIPT_PARAM_ONOFF, true)
		Settings.ks:addParam("ksR", "Kullan "..SkillR.name.." (R)", SCRIPT_PARAM_ONOFF, true)
		Settings.ks:addParam("ksRrange", ""..SkillR.name.." (R) Menzil", SCRIPT_PARAM_SLICE, 20000, 550, 20000, 0)
		Settings.ks:addParam("sep2", " ", SCRIPT_PARAM_INFO, "")
		Settings.ks:addParam("autoIgnite", "Oto Tutustur", SCRIPT_PARAM_ONOFF, true)
		Settings.ks:permaShow("killSteal")

	Settings:addSubMenu("Cizimler", "drawing")	
		Settings.drawing:addParam("mDraw", "Butun Cizimleri Devre Disi Birak", SCRIPT_PARAM_ONOFF, false)
		Settings.drawing:addParam("Target", "Draw Circle on Target", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("Text", "Draw Text on Target", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("myHero", "Benim Menzilimi Ciz", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("myColor", "Benim Menzilimin Rengi", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		Settings.drawing:addParam("qDraw", "Draw "..SkillQ.name.." (Q) Menzili", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("qColor", "Draw "..SkillQ.name.." (Q) Rengi", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		Settings.drawing:addParam("wDraw", "Draw "..SkillW.name.." (W) Menzili", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("wColor", "Draw "..SkillW.name.." (W) Rengi", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		Settings.drawing:addParam("eDraw", "Draw "..SkillE.name.." (E) Menzili", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("eColor", "Draw "..SkillE.name.." (E) Rengi", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		
		Settings.drawing:addSubMenu("Lag Free Circles", "lfc")	
			Settings.drawing.lfc:addParam("lfc", "Lag Free Circles", SCRIPT_PARAM_ONOFF, false)
			Settings.drawing.lfc:addParam("CL", "Quality", 4, 75, 75, 2000, 0)
			Settings.drawing.lfc:addParam("Width", "Width", 4, 1, 1, 10, 0)
	
	Settings:addSubMenu("Diger Ayarlar", "misc")
		Settings.misc:addParam("prediction", "Prediction Seciniz", SCRIPT_PARAM_LIST, 1, { "VPrediction", "Prodiction" })

	
	Settings:addSubMenu("Orbwalking Ayarlari", "Orbwalking")
		SxOrb:LoadToMenu(Settings.Orbwalking)
		
	Settings:addSubMenu("Base Ult", "BaseUlt")
		Settings.BaseUlt:addParam("eklenecek", "Yakinda Eklenecek", SCRIPT_PARAM_ONOFF, false)
	
	TargetSelector = TargetSelector(TARGET_LESS_CAST, SkillQ.range, DAMAGE_PHYSICAL, true)
	TargetSelector.name = "Ezreal"
	Settings:addTS(TargetSelector)
end

function Variables()
	SkillQ = { name = "Gizemli Atis", range = 1150, delay = 0.25, speed = 2000, width = 60, ready = false }
	SkillW = { name = "Ozut Akisi", range = 1000, delay = 0.25, speed = 1600, width = 80, ready = false }
	SkillE = { name = "Sihir Gecisi", range = 475, delay = nil, speed = nil, width = nil, ready = false }
	SkillR = { name = "Isabet Dalgasi", range = math.huge, delay = 1.0, speed = 2000, width = 160, ready = false }
	Ignite = { name = "summonerdot", range = 600, slot = nil }
	
	enemyMinions = minionManager(MINION_ENEMY, SkillQ.range, myHero, MINION_SORT_HEALTH_ASC)
	
	VP = VPrediction()
	
	JungleMobs = {}
	JungleFocusMobs = {}
	
	if GetGame().map.shortName == "twistedTreeline" then
		TwistedTreeline = true 
	else
		TwistedTreeline = false
	end
	
	_G.oldDrawCircle = rawget(_G, 'DrawCircle')
	_G.DrawCircle = DrawCircle2	
	
	priorityTable = {
			AP = {
				"Annie", "Ahri", "Akali", "Anivia", "Annie", "Brand", "Cassiopeia", "Diana", "Evelynn", "FiddleSticks", "Fizz", "Gragas", "Heimerdinger", "Karthus",
				"Kassadin", "Katarina", "Kayle", "Kennen", "Leblanc", "Lissandra", "Lux", "Malzahar", "Mordekaiser", "Morgana", "Nidalee", "Orianna",
				"Ryze", "Sion", "Swain", "Syndra", "Teemo", "TwistedFate", "Veigar", "Viktor", "Vladimir", "Xerath", "Ziggs", "Zyra", "Velkoz"
			},
			
			Support = {
				"Alistar", "Blitzcrank", "Janna", "Karma", "Leona", "Lulu", "Nami", "Nunu", "Sona", "Soraka", "Taric", "Thresh", "Zilean", "Braum"
			},
			
			Tank = {
				"Amumu", "Chogath", "DrMundo", "Galio", "Hecarim", "Malphite", "Maokai", "Nasus", "Rammus", "Sejuani", "Nautilus", "Shen", "Singed", "Skarner", "Volibear",
				"Warwick", "Yorick", "Zac"
			},
			
			AD_Carry = {
				"Ashe", "Caitlyn", "Corki", "Draven", "Ezreal", "Graves", "Jayce", "Jinx", "KogMaw", "Lucian", "MasterYi", "MissFortune", "Pantheon", "Quinn", "Shaco", "Sivir",
				"Talon","Tryndamere", "Tristana", "Twitch", "Urgot", "Varus", "Vayne", "Yasuo", "Zed"
			},
			
			Bruiser = {
				"Aatrox", "Darius", "Elise", "Fiora", "Gangplank", "Garen", "Irelia", "JarvanIV", "Jax", "Khazix", "LeeSin", "Nocturne", "Olaf", "Poppy",
				"Renekton", "Rengar", "Riven", "Rumble", "Shyvana", "Trundle", "Udyr", "Vi", "MonkeyKing", "XinZhao"
			}
	}

	Items = {
		BRK = { id = 3153, range = 450, reqTarget = true, slot = nil },
		BWC = { id = 3144, range = 400, reqTarget = true, slot = nil },
		DFG = { id = 3128, range = 750, reqTarget = true, slot = nil },
		HGB = { id = 3146, range = 400, reqTarget = true, slot = nil },
		RSH = { id = 3074, range = 350, reqTarget = false, slot = nil },
		STD = { id = 3131, range = 350, reqTarget = false, slot = nil },
		TMT = { id = 3077, range = 350, reqTarget = false, slot = nil },
		YGB = { id = 3142, range = 350, reqTarget = false, slot = nil },
		BFT = { id = 3188, range = 750, reqTarget = true, slot = nil },
		RND = { id = 3143, range = 275, reqTarget = false, slot = nil }
	}
	
	if not TwistedTreeline then
		JungleMobNames = { 
			["SRU_MurkwolfMini2.1.3"]	= true,
			["SRU_MurkwolfMini2.1.2"]	= true,
			["SRU_MurkwolfMini8.1.3"]	= true,
			["SRU_MurkwolfMini8.1.2"]	= true,
			["SRU_BlueMini1.1.2"]		= true,
			["SRU_BlueMini7.1.2"]		= true,
			["SRU_BlueMini21.1.3"]		= true,
			["SRU_BlueMini27.1.3"]		= true,
			["SRU_RedMini10.1.2"]		= true,
			["SRU_RedMini10.1.3"]		= true,
			["SRU_RedMini4.1.2"]		= true,
			["SRU_RedMini4.1.3"]		= true,
			["SRU_KrugMini11.1.1"]		= true,
			["SRU_KrugMini5.1.1"]		= true,
			["SRU_RazorbeakMini9.1.2"]	= true,
			["SRU_RazorbeakMini9.1.3"]	= true,
			["SRU_RazorbeakMini9.1.4"]	= true,
			["SRU_RazorbeakMini3.1.2"]	= true,
			["SRU_RazorbeakMini3.1.3"]	= true,
			["SRU_RazorbeakMini3.1.4"]	= true
		}
		
		FocusJungleNames = {
			["SRU_Blue1.1.1"]			= true,
			["SRU_Blue7.1.1"]			= true,
			["SRU_Murkwolf2.1.1"]		= true,
			["SRU_Murkwolf8.1.1"]		= true,
			["SRU_Gromp13.1.1"]			= true,
			["SRU_Gromp14.1.1"]			= true,
			["Sru_Crab16.1.1"]			= true,
			["Sru_Crab15.1.1"]			= true,
			["SRU_Red10.1.1"]			= true,
			["SRU_Red4.1.1"]			= true,
			["SRU_Krug11.1.2"]			= true,
			["SRU_Krug5.1.2"]			= true,
			["SRU_Razorbeak9.1.1"]		= true,
			["SRU_Razorbeak3.1.1"]		= true,
			["SRU_Dragon6.1.1"]			= true,
			["SRU_Baron12.1.1"]			= true
		}
	else
		FocusJungleNames = {
			["TT_NWraith1.1.1"]			= true,
			["TT_NGolem2.1.1"]			= true,
			["TT_NWolf3.1.1"]			= true,
			["TT_NWraith4.1.1"]			= true,
			["TT_NGolem5.1.1"]			= true,
			["TT_NWolf6.1.1"]			= true,
			["TT_Spiderboss8.1.1"]		= true
		}		
		JungleMobNames = {
			["TT_NWraith21.1.2"]		= true,
			["TT_NWraith21.1.3"]		= true,
			["TT_NGolem22.1.2"]			= true,
			["TT_NWolf23.1.2"]			= true,
			["TT_NWolf23.1.3"]			= true,
			["TT_NWraith24.1.2"]		= true,
			["TT_NWraith24.1.3"]		= true,
			["TT_NGolem25.1.1"]			= true,
			["TT_NWolf26.1.2"]			= true,
			["TT_NWolf26.1.3"]			= true
		}
	end
		
	for i = 0, objManager.maxObjects do
		local object = objManager:getObject(i)
		if object and object.valid and not object.dead then
			if FocusJungleNames[object.name] then
				JungleFocusMobs[#JungleFocusMobs+1] = object
			elseif JungleMobNames[object.name] then
				JungleMobs[#JungleMobs+1] = object
			end
		end
	end
end

function SetPriority(table, hero, priority)
	for i=1, #table, 1 do
		if hero.charName:find(table[i]) ~= nil then
			TS_SetHeroPriority(priority, hero.charName)
		end
	end
end
 
function arrangePrioritys()
		for i, enemy in ipairs(GetEnemyHeroes()) do
		SetPriority(priorityTable.AD_Carry, enemy, 1)
		SetPriority(priorityTable.AP,	   enemy, 2)
		SetPriority(priorityTable.Support,  enemy, 3)
		SetPriority(priorityTable.Bruiser,  enemy, 4)
		SetPriority(priorityTable.Tank,	 enemy, 5)
		end
end

function arrangePrioritysTT()
        for i, enemy in ipairs(GetEnemyHeroes()) do
		SetPriority(priorityTable.AD_Carry, enemy, 1)
		SetPriority(priorityTable.AP,       enemy, 1)
		SetPriority(priorityTable.Support,  enemy, 2)
		SetPriority(priorityTable.Bruiser,  enemy, 2)
		SetPriority(priorityTable.Tank,     enemy, 3)
        end
end

function UseItems(unit)
	if unit ~= nil then
		for _, item in pairs(Items) do
			item.slot = GetInventorySlotItem(item.id)
			if item.slot ~= nil then
				if item.reqTarget and GetDistance(unit) < item.range then
					CastSpell(item.slot, unit)
				elseif not item.reqTarget then
					if (GetDistance(unit) - getHitBoxRadius(myHero) - getHitBoxRadius(unit)) < 50 then
						CastSpell(item.slot)
					end
				end
			end
		end
	end
end

function getHitBoxRadius(target)
	return GetDistance(target.minBBox, target.maxBBox)/2
end

function PriorityOnLoad()
	if heroManager.iCount < 10 or (TwistedTreeline and heroManager.iCount < 6) then
		print("<b><font color=\"#6699FF\">BETA:</font></b> <font color=\"#FFFFFF\"> </font>")
	elseif heroManager.iCount == 6 then
		arrangePrioritysTT()
    else
		arrangePrioritys()
	end
end

function GetJungleMob()
	for _, Mob in pairs(JungleFocusMobs) do
		if ValidTarget(Mob, SkillQ.range) then return Mob end
	end
	for _, Mob in pairs(JungleMobs) do
		if ValidTarget(Mob, SkillQ.range) then return Mob end
	end
end

function OnCreateObj(obj)
	if obj.valid then
		if FocusJungleNames[obj.name] then
			JungleFocusMobs[#JungleFocusMobs+1] = obj
		elseif JungleMobNames[obj.name] then
			JungleMobs[#JungleMobs+1] = obj
		end
	end
end

function OnDeleteObj(obj)
	for i, Mob in pairs(JungleMobs) do
		if obj.name == Mob.name then
			table.remove(JungleMobs, i)
		end
	end
	for i, Mob in pairs(JungleFocusMobs) do
		if obj.name == Mob.name then
			table.remove(JungleFocusMobs, i)
		end
	end
end

function TrueRange()
	return myHero.range + GetDistance(myHero, myHero.minBBox)
end

function GetCustomTarget()
 	TargetSelector:update() 	
	if _G.MMA_Target and _G.MMA_Target.type == myHero.type then return _G.MMA_Target end
	if _G.AutoCarry and _G.AutoCarry.Crosshair and _G.AutoCarry.Attack_Crosshair and _G.AutoCarry.Attack_Crosshair.target and _G.AutoCarry.Attack_Crosshair.target.type == myHero.type then return _G.AutoCarry.Attack_Crosshair.target end
	return TargetSelector.target
end

function DrawCircleNextLvl(x, y, z, radius, width, color, chordlength)
  radius = radius or 300
  quality = math.max(8,round(180/math.deg((math.asin((chordlength/(2*radius)))))))
  quality = 2 * math.pi / quality
  radius = radius*.92
  
  local points = {}
  for theta = 0, 2 * math.pi + quality, quality do
    local c = WorldToScreen(D3DXVECTOR3(x + radius * math.cos(theta), y, z - radius * math.sin(theta)))
    points[#points + 1] = D3DXVECTOR2(c.x, c.y)
  end
  
  DrawLines2(points, width or 1, color or 4294967295)
end

function round(num) 
  if num >= 0 then return math.floor(num+.5) else return math.ceil(num-.5) end
end

function DrawCircle2(x, y, z, radius, color)
  local vPos1 = Vector(x, y, z)
  local vPos2 = Vector(cameraPos.x, cameraPos.y, cameraPos.z)
  local tPos = vPos1 - (vPos1 - vPos2):normalized() * radius
  local sPos = WorldToScreen(D3DXVECTOR3(tPos.x, tPos.y, tPos.z))
  
  if OnScreen({ x = sPos.x, y = sPos.y }, { x = sPos.x, y = sPos.y }) then
    DrawCircleNextLvl(x, y, z, radius, Settings.drawing.lfc.Width, color, Settings.drawing.lfc.CL) 
  end
end

function SetRRange()
	if SkillR.ready then
		SkillR.range = Settings.ks.ksRrange
	end
end
end

if myHero.charName == "Graves" then

local ts = TargetSelector(TARGET_LESS_CAST_PRIORITY, 1000, DAMAGE_PHYSICAL)
local rts = TargetSelector(TARGET_LESS_CAST_PRIORITY, 2000, DAMAGE_PHYSICAL)
local qDelay, qWidth, qRange, qSpeed = 0.25, 25*math.pi/180, 950, 2000
local wDelay, wWidth, wRange, wSpeed = 0.25, 250, 950, 1650
local rDelay, rWidth, rRange, rSpeed = 0.25, 100, 1000, 2100
local VP = VPrediction()

function OnLoad()
	PrintChat("<font color=\"#FFFF00\">Graves Beta <font color=\"#FF0000\">Centilmen50")
	Menu()
end

function Menu()
	Config = scriptConfig("Graves BETA", "Centilmen50s")
	
	Config:addSubMenu("Kombo Ayarlari", "combo")
		Config.combo:addParam("useq", "Komboda Q Kullan", SCRIPT_PARAM_ONOFF, true)
		Config.combo:addParam("usew", "Komboda W Kullan", SCRIPT_PARAM_ONOFF, true)
		Config.combo:addParam("usee", "Komboda E Kullan", SCRIPT_PARAM_ONOFF, true)
		Config.combo:addParam("user", "Ulti Ile Kill Cal", SCRIPT_PARAM_ONOFF, true)
		Config.combo:addParam("fullcombo", "Kombo", SCRIPT_PARAM_ONKEYDOWN, false, string.byte(" "))
		
	Config:addSubMenu("Itemler", "items")
		Config.items:addParam("bilgewater", "Bilgewater Palasi", SCRIPT_PARAM_ONOFF, true)
		Config.items:addParam("botrk", "Mahvolmus Kralin Kilici", SCRIPT_PARAM_ONOFF, true)
		Config.items:addParam("youmuus", "Youmu", SCRIPT_PARAM_ONOFF, true)
		
	Config:addSubMenu("Cizimler", "drawing")
		Config.drawing:addParam("drawqw", "Q + W Menzili", SCRIPT_PARAM_ONOFF, true)
		Config.drawing:addParam("drawe", "E Menzili", SCRIPT_PARAM_ONOFF, true)
		Config.drawing:addParam("drawr", "R Menzili", SCRIPT_PARAM_ONOFF, true)
		
	Config:addSubMenu("Orbwalking", "SxOrbWalk")
		SxOrb:LoadToMenu(Config.SxOrbWalk)
end

function OnTick()
	ts:update()
	rts:update()
	Spells()
	BilgeWater()
	Botrk()
	Youmuus()
end

function Spells()
	
	if (Config.combo.fullcombo) and (Config.combo.useq) then
		if ValidTarget(ts.target, 950) then
			if (myHero:CanUseSpell(_Q) == READY) then
				local CastPosition, HitChance, Position = VP:GetConeAOECastPosition(ts.target, qDelay, qWidth, qRange-20, qSpeed, myHero)
				if CastPosition and HitChance >= 2 then
					CastSpell(_Q, CastPosition.x, CastPosition.z)
				end
			end
		end
	end
		
	if (Config.combo.fullcombo) and (Config.combo.usew) then
		if ValidTarget(ts.target, 950) then
			if (myHero:CanUseSpell(_W) == READY) then
				local CastPosition, HitChance, Position = VP:GetCircularAOECastPosition(ts.target, wDelay, wWidth, wRange, wSpeed, myHero)
				if CastPosition and HitChance >= 2  then
					CastSpell(_W, CastPosition.x, CastPosition.z)
				end
			end
		end
	end
		
	if (Config.combo.fullcombo) and (Config.combo.usee) then
		if ValidTarget(ts.target, myHero.range + 425) then
			if (myHero:CanUseSpell(_E) == READY) then
				CastSpell(_E, mousePos.x, mousePos.z)
			end
		end
	end

	if Config.combo.user then
		if ValidTarget(rts.target, 2000) and getDmg("R", rts.target, myHero) > rts.target.health then
			if myHero:CanUseSpell(_R) == READY then
				local CastPosition,  HitChance,  Position = VP:GetLineCastPosition(ts.target, rDelay, rWidth, rRange, rSpeed, myHero)
				if CastPosition and HitChance >= 2 then
					CastSpell(_R, CastPosition.x, CastPosition.z)
				end
			end
		end
	end
end

function BilgeWater()
	if (Config.combo.fullcombo) and (Config.items.bilgewater) then
		if ValidTarget(ts.target, 450) then
			if (GetInventorySlotItem(3144) ~= nil) then
				if (myHero:CanUseSpell(GetInventorySlotItem(3144)) == READY) then
					CastSpell(GetInventorySlotItem(3144), ts.target)
				end
			end
		end
	end
end

function Botrk()
	if (Config.combo.fullcombo) and (Config.items.botrk) then
		if ValidTarget(ts.target, 450) then
			if (GetInventorySlotItem(3153) ~= nil) then
				if (myHero:CanUseSpell(GetInventorySlotItem(3153)) == READY) then
					CastSpell(GetInventorySlotItem(3153), ts.target)
				end
			end
		end
	end
end

function Youmuus()
	if (Config.combo.fullcombo) and (Config.items.youmuus) then
		if ValidTarget(ts.target, 650) then
			if (GetInventorySlotItem(3142) ~= nil) then
				if (myHero:CanUseSpell(GetInventorySlotItem(3142)) == READY) then
					CastSpell(GetInventorySlotItem(3142), ts.target)
				end
			end
		end
	end
end

function OnDraw()
	if (myHero.dead) then return end
	if (Config.drawing.drawqw) then
		DrawCircle(myHero.x, myHero.y, myHero.z, 950, RGB(204, 0, 0))
	end
	if (Config.drawing.drawe) then
		DrawCircle(myHero.x, myHero.y, myHero.z, 425, RGB(0, 204, 0))
	end
	if (Config.drawing.drawr) then
		DrawCircle(myHero.x, myHero.y, myHero.z, 1000, RGB(0, 0, 204))
	end
end

end

if myHero.charName == "Corki" then

function OnLoad()
	PrintChat("<font color=\"#FFFF00\">Corki Beta <font color=\"#FF0000\">Centilmen50")
	Variables()
	Menu()
	PriorityOnLoad()
end

function OnTick()
	ComboKey = Settings.combo.comboKey
	HarassKey = Settings.harass.harassKey
	JungleClearKey = Settings.jungle.jungleKey
	LaneClearKey = Settings.lane.laneKey
	
	if ComboKey then
		Combo(Target)
	end
	
	if HarassKey then
		Harass(Target)
	end
	
	if JungleClearKey then
		JungleClear()
	end
	
	if LaneClearKey then
		LaneClear()
	end
	
	if Settings.ks.killSteal then
		KillSteal()
	end

	Checks()
end

function OnDraw()
	if not myHero.dead and not Settings.drawing.mDraw then
		if SkillQ.ready and Settings.drawing.qDraw then 
			DrawCircle(myHero.x, myHero.y, myHero.z, SkillQ.range, RGB(Settings.drawing.qColor[2], Settings.drawing.qColor[3], Settings.drawing.qColor[4]))
		end
		if SkillW.ready and Settings.drawing.wDraw then 
			DrawCircle(myHero.x, myHero.y, myHero.z, SkillW.range, RGB(Settings.drawing.wColor[2], Settings.drawing.wColor[3], Settings.drawing.wColor[4]))
		end
		if SkillE.ready and Settings.drawing.eDraw then 
			DrawCircle(myHero.x, myHero.y, myHero.z, SkillE.range, RGB(Settings.drawing.eColor[2], Settings.drawing.eColor[3], Settings.drawing.eColor[4]))
		end
		if SkillR.ready and Settings.drawing.rDraw then 
			DrawCircle(myHero.x, myHero.y, myHero.z, SkillR.range, RGB(Settings.drawing.rColor[2], Settings.drawing.rColor[3], Settings.drawing.rColor[4]))
		end
		
		if Settings.drawing.myHero then
			DrawCircle(myHero.x, myHero.y, myHero.z, TrueRange(), RGB(Settings.drawing.myColor[2], Settings.drawing.myColor[3], Settings.drawing.myColor[4]))
		end
		
		if Settings.drawing.Target and Target ~= nil then
			DrawCircle(Target.x, Target.y, Target.z, 80, ARGB(255, 10, 255, 10))
		end
	end
end

------------------------------------------------------
--			 Functions				
------------------------------------------------------

function Combo(unit)
	if ValidTarget(unit) and unit ~= nil and unit.type == myHero.type then
		if Settings.combo.comboItems then
			UseItems(unit)
		end
		
		CastW(unit)
		CastQ(unit)
		CastE(unit)
		HandleRCast(unit)
	end
end

function Harass(unit)
	if ValidTarget(unit) and unit ~= nil and unit.type == myHero.type and not IsMyManaLow() then
		if Settings.harass.useQ then CastQ(unit) end
		if Settings.harass.useR then HandleRCast(unit) end
	end
end

function LaneClear()
	enemyMinions:update()
	if LaneClearKey then
		for i, minion in pairs(enemyMinions.objects) do
			if ValidTarget(minion) and minion ~= nil then
				if Settings.lane.laneQ and GetDistance(minion) <= SkillQ.range and SkillQ.ready then
					local BestPos, BestHit = GetBestCircularFarmPosition(SkillQ.range, SkillQ.width, enemyMinions.objects)
						if BestPos ~= nil then
							CastSpell(_Q, BestPos.x, BestPos.z)
						end
				end
				
				if Settings.lane.laneR and GetDistance(minion) <= SkillR.range and SkillR.ready then
					CastSpell(_R, minion.x, minion.z)
				end
			end		 
		end
	end
end

function JungleClear()
	if Settings.jungle.jungleKey then
		local JungleMob = GetJungleMob()
		
		if JungleMob ~= nil then
			if Settings.jungle.jungleQ and GetDistance(JungleMob) <= SkillQ.range and SkillQ.ready then
				CastSpell(_Q, JungleMob.x, JungleMob.z)
			end
			if Settings.jungle.jungleR and GetDistance(JungleMob) <= SkillR.range and SkillR.ready then
				CastSpell(_R, JungleMob.x, JungleMob.z)
			end
		end
	end
end

function CastQ(unit)
	if unit ~= nil and GetDistance(unit) <= SkillQ.range and SkillQ.ready then
		local AOECastPosition, MainTargetHitChance, nTargets = VP:GetCircularAOECastPosition(unit, SkillQ.delay, SkillQ.width, SkillQ.range, SkillQ.speed, myHero)
		
		if MainTargetHitChance >= 2 then
			CastSpell(_Q, AOECastPosition.x, AOECastPosition.z)
		end
	end
end

function CastW(unit)
	if unit ~= nil then
		if SkillW.ready and GetDistance(unit) <= SkillW.range and Settings.combo.useW == 1 then
			local Mouse = Vector(myHero) + 400 * (Vector(mousePos) - Vector(myHero)):normalized()
			CastSpell(_W, Mouse.x, Mouse.z) 
		elseif SkillW.ready and GetDistance(unit) <= SkillW.range and Settings.combo.useW == 2 then
			CastSpell(_W, unit.x, unit.z)
		elseif Settings.combo.useW == 3 then
			return
		end
	end
end

function CastE(unit)
	if unit ~= nil and SkillE.ready and GetDistance(unit) <= SkillE.range then
		CastSpell(_E, unit.x, unit.z)
	end
end

function HandleRCast(unit)
	if unit ~= nil and ValidTarget(unit) then
		if TheBigOne == true then
			CastR_TBO(unit)
		else
			CastR(unit)
		end
	end
end

function CastR(unit)
	if unit ~= nil and GetDistance(unit) <= SkillR.range and SkillR.ready then
		local CastPosition,  HitChance,  Position = VP:GetLineCastPosition(unit, SkillR.delay, SkillR.width, SkillR.range, SkillR.speed, myHero, true)
		
		if HitChance >= 2 then
			CastSpell(_R, CastPosition.x, CastPosition.z)
		end
	end
end

function CastR_TBO(unit)
	if unit ~= nil and GetDistance(unit) <= SkillR.range and SkillR.ready then
		local CastPosition,  HitChance,  Position = VP:GetLineCastPosition(unit, SkillR.delay, SkillR.width*2, SkillR.range, SkillR.speed, myHero, true)
		
		if HitChance >= 2 then
			CastSpell(_R, CastPosition.x, CastPosition.z)
		end
	end
end

function KillSteal()
	for _, enemy in ipairs(GetEnemyHeroes()) do
		if ValidTarget(enemy) and enemy.visible then
			local qDmg = getDmg("Q", enemy, myHero)
			local rDmg = getDmg("R", enemy, myHero)
			
			if enemy.health <= qDmg then
				CastQ(enemy)
			elseif enemy.health <= (qDmg + rDmg) and GetDistance(enemy) <= SkillQ.range then
				CastQ(enemy)
				HandleRCast(enemy)
			elseif enemy.health <= rDmg then
				HandleRCast(enemy)
			end

			if Settings.ks.autoIgnite then
				AutoIgnite(enemy)
			end
		end
	end
end

function AutoIgnite(unit)
	if ValidTarget(unit, Ignite.range) and unit.health <= 50 + (20 * myHero.level) then
		if Ignite.ready then
			CastSpell(Ignite.slot, unit)
		end
	end
end

------------------------------------------------------
--			 Checks, menu & stuff				
------------------------------------------------------

function Checks()
	SkillQ.ready = (myHero:CanUseSpell(_Q) == READY)
	SkillW.ready = (myHero:CanUseSpell(_W) == READY)
	SkillE.ready = (myHero:CanUseSpell(_E) == READY)
	SkillR.ready = (myHero:CanUseSpell(_R) == READY)
	
	if myHero:GetSpellData(SUMMONER_1).name:find(Ignite.name) then
		Ignite.slot = SUMMONER_1
	elseif myHero:GetSpellData(SUMMONER_2).name:find(Ignite.name) then
		Ignite.slot = SUMMONER_2
	end
	
	Ignite.ready = (Ignite.slot ~= nil and myHero:CanUseSpell(Ignite.slot) == READY)
	
	TargetSelector:update()
	Target = GetCustomTarget()
	SxOrb:ForceTarget(Target)
	
	if Settings.drawing.lfc.lfc then _G.DrawCircle = DrawCircle2 else _G.DrawCircle = _G.oldDrawCircle end
	
	if TargetHaveBuff("mbcheck2", myHero) then TheBigOne = true else TheBigOne = false end
end

function IsMyManaLow()
	if myHero.mana < (myHero.maxMana * ( Settings.harass.harassMana / 100)) then
		return true
	else
		return false
	end
end

function Menu()
	Settings = scriptConfig("Corki "..version.."", "Centilmen50s")
	
	Settings:addSubMenu("Kombo Ayarlari", "combo")
		Settings.combo:addParam("comboKey", "Kombo", SCRIPT_PARAM_ONKEYDOWN, false, 32)
		Settings.combo:addParam("useQ", ""..SkillQ.name.." (Q) Komboda Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.combo:addParam("useW", ""..SkillW.name.." (W) Komboda Kullan", SCRIPT_PARAM_LIST, 1, { "Imlece Dogru", "Hedefe Dogru"})
		Settings.combo:addParam("useE", ""..SkillE.name.." (E) Komboda Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.combo:addParam("comboItems", "Itemlari Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.combo:permaShow("comboKey")
	
	Settings:addSubMenu("Durtme Ayarlari", "harass")
		Settings.harass:addParam("harassKey", "Durtme", SCRIPT_PARAM_ONKEYDOWN, false, GetKey("C"))
		Settings.harass:addParam("useQ", ""..SkillQ.name.." (Q) Durtmede Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.harass:addParam("useR", ""..SkillR.name.." (R) Durtmede Kullan", SCRIPT_PARAM_ONOFF, true)
		Settings.harass:addParam("harassMana", "Min. Mana Percent: ", SCRIPT_PARAM_SLICE, 50, 0, 100, 0)
		Settings.harass:permaShow("harassKey")
		
	Settings:addSubMenu("Koridor Temizleme Ayarlari", "lane")
		Settings.lane:addParam("laneKey", "Koridor Temizleme", SCRIPT_PARAM_ONKEYDOWN, false, GetKey("V"))
		Settings.lane:addParam("laneQ", ""..SkillQ.name.." (Q) Ile Koridor Temizle", SCRIPT_PARAM_ONOFF, true)
		Settings.lane:addParam("laneR", ""..SkillR.name.." (R) Ile Koridor Temizle", SCRIPT_PARAM_ONOFF, true)
		Settings.lane:permaShow("laneKey")
		
	Settings:addSubMenu("Orman Temizleme Ayarlari", "jungle")
		Settings.jungle:addParam("jungleKey", "Orman Temizleme", SCRIPT_PARAM_ONKEYDOWN, false, GetKey("V"))
		Settings.jungle:addParam("jungleQ", ""..SkillQ.name.." (Q) Ile Orman Temizle", SCRIPT_PARAM_ONOFF, true)
		Settings.jungle:addParam("jungleR", ""..SkillR.name.." (R) Ile Orman Temizle", SCRIPT_PARAM_ONOFF, true)
		Settings.jungle:permaShow("jungleKey")
		
	Settings:addSubMenu("Kill Calma Ayarlari", "ks")
		Settings.ks:addParam("killSteal", "Klasik Kill Calma", SCRIPT_PARAM_ONOFF, true)
		Settings.ks:addParam("autoIgnite", "Oto Tutustur", SCRIPT_PARAM_ONOFF, true)
		Settings.ks:permaShow("killSteal")
			
	Settings:addSubMenu("Cizim Ayarlari", "drawing")	
		Settings.drawing:addParam("mDraw", "Butun Cizimleri Devre Disi Birak", SCRIPT_PARAM_ONOFF, false)
		Settings.drawing:addParam("Target", "Draw Circle on Target", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("Text", "Draw Text on Target", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("myHero", "Benim Menzilim", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("myColor", "Benim Menzilimin Rengi", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		Settings.drawing:addParam("qDraw", ""..SkillQ.name.." (Q) Menzili", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("qColor", ""..SkillQ.name.." (Q) Rengi", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		Settings.drawing:addParam("wDraw", ""..SkillW.name.." (W) Menzili", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("wColor", ""..SkillW.name.." (W) Rengi", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		Settings.drawing:addParam("eDraw", ""..SkillE.name.." (E) Menzili", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("eColor", ""..SkillE.name.." (E) Rengi", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		Settings.drawing:addParam("rDraw", ""..SkillR.name.." (R) Menzili", SCRIPT_PARAM_ONOFF, true)
		Settings.drawing:addParam("rColor", ""..SkillR.name.." (R) Rengi", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		
		Settings.drawing:addSubMenu("Lag Free Circles", "lfc")	
			Settings.drawing.lfc:addParam("lfc", "Lag Free Circles", SCRIPT_PARAM_ONOFF, false)
			Settings.drawing.lfc:addParam("CL", "Quality", 4, 75, 75, 2000, 0)
			Settings.drawing.lfc:addParam("Width", "Width", 4, 1, 1, 10, 0)
	
	Settings:addSubMenu("Orbwalking Ayarlari", "Orbwalking")
		SxOrb:LoadToMenu(Settings.Orbwalking)
	
	TargetSelector = TargetSelector(TARGET_LESS_CAST, SkillR.range, DAMAGE_PHYSICAL, true)
	TargetSelector.name = "Corki"
	Settings:addTS(TargetSelector)
end

function Variables()
	SkillQ = { name = "Fosfor Bombasi", range = 825, delay = 0.5, speed = 1125, width = 450, ready = false }
	SkillW = { name = "Valkyrie", range = 800, delay = nil, speed = nil, width = nil, ready = false }
	SkillE = { name = "Makineli Tufek", range = 600, delay = nil, speed = nil, width = nil, ready = false }
	SkillR = { name = "Fuze Salvosu", range = 1225, delay = 0.25, speed = 2000, width = 75, ready = false }
	Ignite = { name = "summonerdot", range = 600, slot = nil }
	
	enemyMinions = minionManager(MINION_ENEMY, SkillR.range, myHero, MINION_SORT_HEALTH_ASC)
	
	VP = VPrediction()
	
	JungleMobs = {}
	JungleFocusMobs = {}
	
	TheBigOne = false
	
	if GetGame().map.shortName == "twistedTreeline" then
		TwistedTreeline = true 
	else
		TwistedTreeline = false
	end
	
	_G.oldDrawCircle = rawget(_G, 'DrawCircle')
	_G.DrawCircle = DrawCircle2	
	
	priorityTable = {
			AP = {
				"Annie", "Ahri", "Akali", "Anivia", "Annie", "Brand", "Cassiopeia", "Diana", "Evelynn", "FiddleSticks", "Fizz", "Gragas", "Heimerdinger", "Karthus",
				"Kassadin", "Katarina", "Kayle", "Kennen", "Leblanc", "Lissandra", "Lux", "Malzahar", "Mordekaiser", "Morgana", "Nidalee", "Orianna",
				"Ryze", "Sion", "Swain", "Syndra", "Teemo", "TwistedFate", "Veigar", "Viktor", "Vladimir", "Xerath", "Ziggs", "Zyra", "Velkoz"
			},
			
			Support = {
				"Alistar", "Blitzcrank", "Janna", "Karma", "Leona", "Lulu", "Nami", "Nunu", "Sona", "Soraka", "Taric", "Thresh", "Zilean", "Braum"
			},
			
			Tank = {
				"Amumu", "Chogath", "DrMundo", "Galio", "Hecarim", "Malphite", "Maokai", "Nasus", "Rammus", "Sejuani", "Nautilus", "Shen", "Singed", "Skarner", "Volibear",
				"Warwick", "Yorick", "Zac"
			},
			
			AD_Carry = {
				"Ashe", "Caitlyn", "Corki", "Draven", "Ezreal", "Graves", "Jayce", "Jinx", "KogMaw", "Lucian", "MasterYi", "MissFortune", "Pantheon", "Quinn", "Shaco", "Sivir",
				"Talon","Tryndamere", "Tristana", "Twitch", "Urgot", "Varus", "Vayne", "Yasuo", "Zed"
			},
			
			Bruiser = {
				"Aatrox", "Darius", "Elise", "Fiora", "Gangplank", "Garen", "Irelia", "JarvanIV", "Jax", "Khazix", "LeeSin", "Nocturne", "Olaf", "Poppy",
				"Renekton", "Rengar", "Riven", "Rumble", "Shyvana", "Trundle", "Udyr", "Vi", "MonkeyKing", "XinZhao"
			}
	}

	Items = {
		BRK = { id = 3153, range = 450, reqTarget = true, slot = nil },
		BWC = { id = 3144, range = 400, reqTarget = true, slot = nil },
		DFG = { id = 3128, range = 750, reqTarget = true, slot = nil },
		HGB = { id = 3146, range = 400, reqTarget = true, slot = nil },
		RSH = { id = 3074, range = 350, reqTarget = false, slot = nil },
		STD = { id = 3131, range = 350, reqTarget = false, slot = nil },
		TMT = { id = 3077, range = 350, reqTarget = false, slot = nil },
		YGB = { id = 3142, range = 350, reqTarget = false, slot = nil },
		BFT = { id = 3188, range = 750, reqTarget = true, slot = nil },
		RND = { id = 3143, range = 275, reqTarget = false, slot = nil }
	}
	
	if not TwistedTreeline then
		JungleMobNames = { 
			["SRU_MurkwolfMini2.1.3"]	= true,
			["SRU_MurkwolfMini2.1.2"]	= true,
			["SRU_MurkwolfMini8.1.3"]	= true,
			["SRU_MurkwolfMini8.1.2"]	= true,
			["SRU_BlueMini1.1.2"]		= true,
			["SRU_BlueMini7.1.2"]		= true,
			["SRU_BlueMini21.1.3"]		= true,
			["SRU_BlueMini27.1.3"]		= true,
			["SRU_RedMini10.1.2"]		= true,
			["SRU_RedMini10.1.3"]		= true,
			["SRU_RedMini4.1.2"]		= true,
			["SRU_RedMini4.1.3"]		= true,
			["SRU_KrugMini11.1.1"]		= true,
			["SRU_KrugMini5.1.1"]		= true,
			["SRU_RazorbeakMini9.1.2"]	= true,
			["SRU_RazorbeakMini9.1.3"]	= true,
			["SRU_RazorbeakMini9.1.4"]	= true,
			["SRU_RazorbeakMini3.1.2"]	= true,
			["SRU_RazorbeakMini3.1.3"]	= true,
			["SRU_RazorbeakMini3.1.4"]	= true
		}
		
		FocusJungleNames = {
			["SRU_Blue1.1.1"]			= true,
			["SRU_Blue7.1.1"]			= true,
			["SRU_Murkwolf2.1.1"]		= true,
			["SRU_Murkwolf8.1.1"]		= true,
			["SRU_Gromp13.1.1"]			= true,
			["SRU_Gromp14.1.1"]			= true,
			["Sru_Crab16.1.1"]			= true,
			["Sru_Crab15.1.1"]			= true,
			["SRU_Red10.1.1"]			= true,
			["SRU_Red4.1.1"]			= true,
			["SRU_Krug11.1.2"]			= true,
			["SRU_Krug5.1.2"]			= true,
			["SRU_Razorbeak9.1.1"]		= true,
			["SRU_Razorbeak3.1.1"]		= true,
			["SRU_Dragon6.1.1"]			= true,
			["SRU_Baron12.1.1"]			= true
		}
	else
		FocusJungleNames = {
			["TT_NWraith1.1.1"]			= true,
			["TT_NGolem2.1.1"]			= true,
			["TT_NWolf3.1.1"]			= true,
			["TT_NWraith4.1.1"]			= true,
			["TT_NGolem5.1.1"]			= true,
			["TT_NWolf6.1.1"]			= true,
			["TT_Spiderboss8.1.1"]		= true
		}		
		JungleMobNames = {
			["TT_NWraith21.1.2"]		= true,
			["TT_NWraith21.1.3"]		= true,
			["TT_NGolem22.1.2"]			= true,
			["TT_NWolf23.1.2"]			= true,
			["TT_NWolf23.1.3"]			= true,
			["TT_NWraith24.1.2"]		= true,
			["TT_NWraith24.1.3"]		= true,
			["TT_NGolem25.1.1"]			= true,
			["TT_NWolf26.1.2"]			= true,
			["TT_NWolf26.1.3"]			= true
		}
	end
		
	for i = 0, objManager.maxObjects do
		local object = objManager:getObject(i)
		if object and object.valid and not object.dead then
			if FocusJungleNames[object.name] then
				JungleFocusMobs[#JungleFocusMobs+1] = object
			elseif JungleMobNames[object.name] then
				JungleMobs[#JungleMobs+1] = object
			end
		end
	end
end

function SetPriority(table, hero, priority)
	for i=1, #table, 1 do
		if hero.charName:find(table[i]) ~= nil then
			TS_SetHeroPriority(priority, hero.charName)
		end
	end
end
 
function arrangePrioritys()
		for i, enemy in ipairs(GetEnemyHeroes()) do
		SetPriority(priorityTable.AD_Carry, enemy, 1)
		SetPriority(priorityTable.AP,	   enemy, 2)
		SetPriority(priorityTable.Support,  enemy, 3)
		SetPriority(priorityTable.Bruiser,  enemy, 4)
		SetPriority(priorityTable.Tank,	 enemy, 5)
		end
end

function arrangePrioritysTT()
        for i, enemy in ipairs(GetEnemyHeroes()) do
		SetPriority(priorityTable.AD_Carry, enemy, 1)
		SetPriority(priorityTable.AP,       enemy, 1)
		SetPriority(priorityTable.Support,  enemy, 2)
		SetPriority(priorityTable.Bruiser,  enemy, 2)
		SetPriority(priorityTable.Tank,     enemy, 3)
        end
end

function UseItems(unit)
	if unit ~= nil then
		for _, item in pairs(Items) do
			item.slot = GetInventorySlotItem(item.id)
			if item.slot ~= nil then
				if item.reqTarget and GetDistance(unit) < item.range then
					CastSpell(item.slot, unit)
				elseif not item.reqTarget then
					if (GetDistance(unit) - getHitBoxRadius(myHero) - getHitBoxRadius(unit)) < 50 then
						CastSpell(item.slot)
					end
				end
			end
		end
	end
end

function getHitBoxRadius(target)
	return GetDistance(target.minBBox, target.maxBBox)/2
end

function PriorityOnLoad()
	if heroManager.iCount < 10 or (TwistedTreeline and heroManager.iCount < 6) then
		
	elseif heroManager.iCount == 6 then
		arrangePrioritysTT()
    else
		arrangePrioritys()
	end
end

function GetJungleMob()
	for _, Mob in pairs(JungleFocusMobs) do
		if ValidTarget(Mob, SkillR.range) then return Mob end
	end
	for _, Mob in pairs(JungleMobs) do
		if ValidTarget(Mob, SkillR.range) then return Mob end
	end
end

function OnCreateObj(obj)
	if obj.valid then
		if FocusJungleNames[obj.name] then
			JungleFocusMobs[#JungleFocusMobs+1] = obj
		elseif JungleMobNames[obj.name] then
			JungleMobs[#JungleMobs+1] = obj
		end
	end
end

function OnDeleteObj(obj)
	for i, Mob in pairs(JungleMobs) do
		if obj.name == Mob.name then
			table.remove(JungleMobs, i)
		end
	end
	for i, Mob in pairs(JungleFocusMobs) do
		if obj.name == Mob.name then
			table.remove(JungleFocusMobs, i)
		end
	end
end

function TrueRange()
	return myHero.range + GetDistance(myHero, myHero.minBBox)
end

-- Trees
function GetCustomTarget()
 	TargetSelector:update() 	
	if _G.MMA_Target and _G.MMA_Target.type == myHero.type then return _G.MMA_Target end
	if _G.AutoCarry and _G.AutoCarry.Crosshair and _G.AutoCarry.Attack_Crosshair and _G.AutoCarry.Attack_Crosshair.target and _G.AutoCarry.Attack_Crosshair.target.type == myHero.type then return _G.AutoCarry.Attack_Crosshair.target end
	return TargetSelector.target
end

function GetBestCircularFarmPosition(range, radius, objects)
    local BestPos 
    local BestHit = 0
    for i, object in ipairs(objects) do
        local hit = CountObjectsNearPos(object.pos or object, range, radius, objects)
        if hit > BestHit then
            BestHit = hit
            BestPos = Vector(object)
            if BestHit == #objects then
               break
            end
         end
    end
    return BestPos, BestHit
end

function CountObjectsNearPos(pos, range, radius, objects)
    local n = 0
    for i, object in ipairs(objects) do
        if GetDistance(pos, object) <= radius then
            n = n + 1
        end
    end
    return n
end

-- Barasia, vadash, viseversa
function DrawCircleNextLvl(x, y, z, radius, width, color, chordlength)
  radius = radius or 300
  quality = math.max(8,round(180/math.deg((math.asin((chordlength/(2*radius)))))))
  quality = 2 * math.pi / quality
  radius = radius*.92
  
  local points = {}
  for theta = 0, 2 * math.pi + quality, quality do
    local c = WorldToScreen(D3DXVECTOR3(x + radius * math.cos(theta), y, z - radius * math.sin(theta)))
    points[#points + 1] = D3DXVECTOR2(c.x, c.y)
  end
  
  DrawLines2(points, width or 1, color or 4294967295)
end

function round(num) 
  if num >= 0 then return math.floor(num+.5) else return math.ceil(num-.5) end
end

function DrawCircle2(x, y, z, radius, color)
  local vPos1 = Vector(x, y, z)
  local vPos2 = Vector(cameraPos.x, cameraPos.y, cameraPos.z)
  local tPos = vPos1 - (vPos1 - vPos2):normalized() * radius
  local sPos = WorldToScreen(D3DXVECTOR3(tPos.x, tPos.y, tPos.z))
  
  if OnScreen({ x = sPos.x, y = sPos.y }, { x = sPos.x, y = sPos.y }) then
    DrawCircleNextLvl(x, y, z, radius, Settings.drawing.lfc.Width, color, Settings.drawing.lfc.CL) 
  end
end

end"), nil, "bt", _ENV))()
  
